version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ocean-forecast-db
    environment:
      POSTGRES_DB: ocean_forecast
      POSTGRES_USER: ocean_user
      POSTGRES_PASSWORD: ocean_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ocean_user -d ocean_forecast"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: ocean-forecast-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ocean-forecast-api
    environment:
      - DATABASE_URL=postgresql://ocean_user:ocean_password@postgres:5432/ocean_forecast
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=false
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics port
    volumes:
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ocean-forecast-worker
    command: celery -A app.scheduler.task_manager.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://ocean_user:ocean_password@postgres:5432/ocean_forecast
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat (Task Scheduler)
  celery-beat:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ocean-forecast-beat
    command: celery -A app.scheduler.task_manager.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ocean_user:ocean_password@postgres:5432/ocean_forecast
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ocean-forecast-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ocean-forecast-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ocean-forecast-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: ocean-forecast-network
